<?xml version="1.0" encoding="utf-8"?>
<template>
	<name>controller</name>
	<filePath>src/main/java/${packageName}/${moduleName}/web/${subModuleName}</filePath>
	<fileName>${ClassName}Controller.java</fileName>
	<content><![CDATA[
/**
 * Copyright &copy; 2009-2018 <a href="http://www.umasoft.com">umasoft</a> All rights reserved.
 */
package ${packageName}.${moduleName}.web<#if subModuleName != "">.${subModuleName}</#if>;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.umasoft.umafrmsite.common.config.Global;
import com.umasoft.umafrmsite.common.persistence.Page;
import com.umasoft.umafrmsite.common.web.BaseController;
import com.umasoft.umafrmsite.common.utils.StringUtils;
import com.umasoft.umafrmsite.modules.act.entity.Act;
import ${packageName}.${moduleName}.entity<#if subModuleName != "">.${subModuleName}</#if>.${ClassName};
import ${packageName}.${moduleName}.service<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}Service;

/**
 * ${functionName}Controller
 * @author ${functionAuthor}@umasoft
 * @version ${functionVersion}
 */
@Controller
@RequestMapping(value = "${r"${adminPath}"}/${urlPrefix}")
public class ${ClassName}Controller extends BaseController {

	@Autowired
	private ${ClassName}Service ${className}Service;
	
	@ModelAttribute
	public ${ClassName} get(@RequestParam(required=false) String id) {
		${ClassName} entity = null;
		if (StringUtils.isNotBlank(id)){
			entity = ${className}Service.get(id);
		}
		if (entity == null){
			entity = new ${ClassName}();
		}
		return entity;
	}
	
	@RequiresPermissions("${permissionPrefix}:view")
	@RequestMapping(value = {"list", ""})
	public String list(${ClassName} ${className}, HttpServletRequest request, HttpServletResponse response, Model model) {
		Page<${ClassName}> page = ${className}Service.findPage(new Page<${ClassName}>(request, response), ${className}); 
		model.addAttribute("page", page);
		
		// 页面搜索条件、页面排序等参数
		EncoderUrlSearchParam(request,model);
		return "${lastPackageName}/${viewPrefix}List";
	}
	
	/*
	*   return JSON data 
	*/
	@ResponseBody
	@RequiresPermissions("${permissionPrefix}:view")
	@RequestMapping(value = {"listData"})
	public Page<${ClassName}> listData(${ClassName} ${className}, HttpServletRequest request, HttpServletResponse response, Model model) {
		Page<${ClassName}> page = ${className}Service.findPage(new Page<${ClassName}>(request, response), ${className}); 
		return page;
	}
	

	@RequiresPermissions("${permissionPrefix}:edit")
	@RequestMapping(value = "form")
	public String form(${ClassName} ${className}, Model model, HttpServletRequest request) {
		
		String view = "${viewPrefix}Form";
		
		// 查看审批申请单
		if (StringUtils.isNotBlank(${className}.getId())){

			// 环节编号
			String taskDefKey = ${className}.getAct().getTaskDefKey();
			
			// 查看工单
			if(${className}.getAct().isFinishTask()){
				view = "${viewPrefix}View";
			}
			// 修改环节
			else if (taskDefKey!=null && (taskDefKey.indexOf("modify") >=0 || taskDefKey.indexOf("moremodify")>=0 )){
				view = "${viewPrefix}Form";
			}else	if(taskDefKey!=null && taskDefKey.indexOf("departpersonal") >=0){ // 部门人员补充单据
				view = "${viewPrefix}Form";				
			}else	if(taskDefKey!=null && (taskDefKey.indexOf("depart") >=0 || taskDefKey.indexOf("personal") >=0)) { // 部门审核单据
				view = "${viewPrefix}Audit";
			}
		}else if(${className}!=null && "finish".equals(${className}.getAct().getStatus())) {
			
			String procInsId = ${className}.getAct().getProcInsId();
			if(StringUtils.isNotBlank(procInsId)) {
				Act act = ${className}.getAct();
				${className} = ${className}Service.getByProcInsId(procInsId); // 根据procnsd载入当前表单的记录
				${className}.setAct(act);  // 当前表单的工作流处理节点数据
				view = "${viewPrefix}View";
			}
		}
		
		// 当一个工作流中需要有多个表单处理时，后面的表单由工作流调转过来，带过来的id和Procnsd是主表单的
		/*
		String mainid = request.getParameter("id");
		MMainEntity MainEntity = null;	// 设置主表单对象，<<===  手动修改
		String procInsId = ${className}.getAct().getProcInsId();
		if(${className}.getUpdateBy() == null  && StringUtils.isNotBlank(${className}.getId())
			&& StringUtils.isNotBlank(procInsId)) {  //属于新建记录
			if(view.equals("${viewPrefix}Audit")) { // 审核表单
				
				Act act = ${className}.getAct();
				${className} = ${className}Service.getByProcInsId(procInsId); // 根据procnsd载入当前表单的记录
				${className}.setAct(act);  // 当前表单的工作流处理节点数据
				
				if(${className}.getEinsApplyId() == null) {
					MainEntity = MMainEntityService.get(mainid);	
				}else {
					MainEntity = MMainEntityService.get(${className}.getMainEntityId().getId());	
				}
			}else {
				Act act = ${className}.getAct();
				${ClassName} ${className}Old = ${className}Service.getByProcInsId(procInsId); // 根据procnsd载入当前表单的记录
				if(${className}Old != null) { // 再编辑表单
					${className} = ${className}Old;					
				}else { // 新建表单
					${className}.setId(null);	
				}
			
				MainEntity = MMainEntityService.get(mainid);	// 设置主表单对象，<<===  手动修改
				${className}.SetMainEntity(MainEntity);									
				${className}.setAct(act); // 本工作流节点信息
				${className}.setProcInsId(procInsId);				
			}
		}
		if(MainEntity == null &&  ${className}.getUpdateBy() == null  && StringUtils.isNotBlank( ${className}.getId())) {
			MainEntity = MainEntityService.get( ${className}.getMainEntityId().getId());	
		}
		*/
		
		//if(MainEntity != null) {
		//	model.addAttribute("MainEntity", MainEntity);
		//}
		
		
		model.addAttribute("${className}", ${className});
		// 页面搜索条件、页面排序等参数
		setUrlSearchParam(request,model);
		return "${lastPackageName}/"+view;//${viewPrefix}Form";
	}
	

	/*
	*   return JSON data 
	*/
	@ResponseBody
	@RequiresPermissions("${permissionPrefix}:view")
	@RequestMapping(value = {"formData"})
	public ${ClassName} formData(${ClassName} ${className}, Model model, HttpServletRequest request) {
		return ${className};
	}

	@RequiresPermissions("${permissionPrefix}:edit")
	@RequestMapping(value = "save")
	public String save(${ClassName} ${className}, Model model, RedirectAttributes redirectAttributes, HttpServletRequest request) {
		if (!beanValidator(model, ${className})){
			return form(${className}, model,request);
		}
		
		${className}Service.save(${className});
		addMessage(redirectAttributes, "保存${functionNameSimple}成功");
		
		// 页面搜索条件、页面排序等参数
		String 	searchUrlParam = decodeUrlSearchParam(request);
		if(StringUtils.isNotBlank(searchUrlParam)) {
			searchUrlParam = "&" + searchUrlParam;
		}
		return "redirect:"+Global.getAdminPath()+"/${viewPrefix}/?repage" + searchUrlParam;
		// /${viewPrefix}修改为主表单的链接
		//return "redirect:"+Global.getAdminPath()+"${viewPrefix}form?repage&id=" +${className}.getMainEntityId().getId();
	}
	
	/**
	 * 工单执行（完成任务）
	 * @param ${ClassName}
	 * @param model
	 * @return
	 */
	@RequiresPermissions("${permissionPrefix}:edit")
	@RequestMapping(value = "saveAudit")
	public String saveAudit(${ClassName} ${className}, Model model, HttpServletRequest request) {
		if (StringUtils.isBlank(${className}.getAct().getFlag())
				|| StringUtils.isBlank(${className}.getAct().getComment())){
			addMessage(model, "请填写审核意见。");
			return form(${className}, model,request);
		}
		
		${className}Service.auditSave(${className});
		return "redirect:" + adminPath + "/act/task/todo/";		
	}
	
	/*
	*   return JSON data 
	*/
	@ResponseBody
	@RequiresPermissions("${permissionPrefix}:edit")
	@RequestMapping(value = {"saveData"})
	public String saveData(${ClassName} ${className}, Model model, RedirectAttributes redirectAttributes) {
		if (!beanValidator(model, ${className})){
			return "保存${functionNameSimple}失败，数据校验失败。";
		}
		${className}Service.save(${className});		
		return "保存${functionNameSimple}成功";
	}
	
	@RequiresPermissions("${permissionPrefix}:edit")
	@RequestMapping(value = "delete")
	public String delete(${ClassName} ${className}, RedirectAttributes redirectAttributes, HttpServletRequest request) {
		${className}Service.delete(${className});
		addMessage(redirectAttributes, "删除${functionNameSimple}成功");
		
		// 页面搜索条件、页面排序等参数
		String 	searchUrlParam = decodeUrlSearchParam(request);
		if(StringUtils.isNotBlank(searchUrlParam)) {
			searchUrlParam = "&" + searchUrlParam;
		}
		return "redirect:"+Global.getAdminPath()+"/${viewPrefix}/?repage" + searchUrlParam;
	}

	/*
	*   return JSON data 
	*/	
	@ResponseBody
	@RequiresPermissions("biz:projectcontractmng:bizProjectContractmng:view")
	@RequestMapping(value = {"deleteData"})
	public String deleteData(${ClassName} ${className}, RedirectAttributes redirectAttributes) {
		${className}Service.delete(${className});
		return "删除${functionNameSimple}成功";
	}

}]]>
	</content>
</template>